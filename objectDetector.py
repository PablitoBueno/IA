# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Jc-KkLpgOMDwBMzSbYwKSwCSqspcKw2s
"""

from google.colab import files
import torch
import numpy as np
import matplotlib.pyplot as plt
from transformers import DetrImageProcessor, DetrForObjectDetection
from tensorflow.keras.preprocessing import image

# Carregar o modelo pré-treinado do Hugging Face para detecção de objetos (DETR)
processor = DetrImageProcessor.from_pretrained("facebook/detr-resnet-50")
model_detr = DetrForObjectDetection.from_pretrained("facebook/detr-resnet-50")

# Realizar o upload da imagem
uploaded = files.upload()

# A imagem será carregada com o nome 'image.jpg', ou outro nome dependendo do upload
img_path = 'image.jpg'  # Assumindo que a imagem foi nomeada como 'image.jpg'

# Carregar a imagem usando o Keras
img = image.load_img(img_path)
img_array = image.img_to_array(img)
img_pil = img  # Para uso no Hugging Face

# Pré-processar a imagem para o modelo de detecção de objetos
inputs = processor(images=img_pil, return_tensors="pt")

# Realizar a detecção de objetos
outputs = model_detr(**inputs)
target_sizes = torch.tensor([img_array.shape[:-1]])

# Processar as predições (caixas de objetos detectados)
results = processor.post_process_object_detection(outputs, target_sizes=target_sizes, threshold=0.9)[0]

# Mostrar as caixas de detecção na imagem
plt.imshow(img)
ax = plt.gca()

# Adicionar caixas de detecção à imagem
for score, label, box in zip(results["scores"], results["labels"], results["boxes"]):
    # Detach the tensor from the computational graph before converting it to a NumPy array
    xmin, ymin, xmax, ymax = box.detach().numpy()
    ax.add_patch(plt.Rectangle((xmin, ymin), xmax - xmin, ymax - ymin,
                               fill=False, color="red", linewidth=3))
    ax.text(xmin, ymin, f"{model_detr.config.id2label[label.item()]}: {score:.2f}",
            bbox=dict(facecolor="yellow", alpha=0.7), fontsize=12, color="black")

plt.axis('off')
plt.show()